program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "5.16.0"}, {"coremlc-version", "1649.0.0"}})]
{
    func main<ios17>(tensor<fp32, [1, 64]> phrase_mask, tensor<fp32, [1, 64]> phrases) [E5_FlagsEir = dict<tensor<string, []>, tensor<string, []>>({{"allowSoftmaxApproximation", "1"}, {"early_arch_conv_w_int8_no_bloat", "1"}, {"early_arch_extended_reshape", "1"}, {"experimental.ane.early_arch_transposes", "1"}, {"experimental.ane.enable_rsqrt", "1"}})] {
            tensor<string, []> input_1_dtype_0 = const()[name = tensor<string, []>("input_1_dtype_0"), val = tensor<string, []>("int32")];
            tensor<int32, []> x_1_axis_0 = const()[name = tensor<string, []>("x_1_axis_0"), val = tensor<int32, []>(0)];
            tensor<fp16, [6000, 256]> embedding_0_weight_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("embedding_0_weight_to_fp16_affine_quantized"), quantized_data = tensor<int8, [6000, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64))), scale = tensor<fp16, [6000]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1542208))), zero_point = tensor<int8, [6000]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1536128)))];
            tensor<int32, []> gather_0_batch_dims_0 = const()[name = tensor<string, []>("gather_0_batch_dims_0"), val = tensor<int32, []>(0)];
            tensor<int32, [1, 64]> cast_5 = cast(dtype = input_1_dtype_0, x = phrases);
            tensor<bool, []> x_1_cast_gather_validate_indices_0 = const()[name = tensor<string, []>("x_1_cast_gather_validate_indices_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 64, 256]> x_1_cast = gather(axis = x_1_axis_0, batch_dims = gather_0_batch_dims_0, indices = cast_5, x = embedding_0_weight_to_fp16_affine_quantized, validate_indices = x_1_cast_gather_validate_indices_0);
            tensor<int32, [3]> var_28_perm_0 = const()[name = tensor<string, []>("op_28_perm_0"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<int32, [1]> x_3_axes_0 = const()[name = tensor<string, []>("x_3_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 256, 64]> transpose_9 = transpose(perm = var_28_perm_0, x = x_1_cast);
            tensor<fp16, [1, 256, 1, 64]> x_3_cast = expand_dims(axes = x_3_axes_0, x = transpose_9);
            tensor<int32, [1]> var_32_axes_0 = const()[name = tensor<string, []>("op_32_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<string, []> phrase_mask_to_fp16_dtype_0 = const()[name = tensor<string, []>("phrase_mask_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 64]> cast_4 = cast(dtype = phrase_mask_to_fp16_dtype_0, x = phrase_mask);
            tensor<fp16, [1, 64, 1]> var_32_cast = expand_dims(axes = var_32_axes_0, x = cast_4);
            tensor<int32, [1]> mask_axes_0 = const()[name = tensor<string, []>("mask_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 64, 1, 1]> mask_cast = expand_dims(axes = mask_axes_0, x = var_32_cast);
            tensor<bool, []> var_47 = const()[name = tensor<string, []>("op_47"), val = tensor<bool, []>(true)];
            tensor<int32, []> var_48 = const()[name = tensor<string, []>("op_48"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 256, 1, 64]> var_70_cast = abs(x = x_3_cast);
            tensor<fp16, []> var_71_to_fp16 = const()[name = tensor<string, []>("op_71_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_72_cast = mul(x = var_70_cast, y = var_71_to_fp16);
            tensor<int32, [1]> var_73 = const()[name = tensor<string, []>("op_73"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_1_cast = reduce_sum(axes = var_73, keep_dims = var_47, x = var_72_cast);
            tensor<fp16, []> scale_3_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_3_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_3_cast = rsqrt(epsilon = scale_3_epsilon_0_to_fp16, x = scale_1_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_5_cast = mul(x = scale_3_cast, y = scale_3_cast);
            tensor<fp16, [1, 256, 1, 64]> x_5_cast = mul(x = x_3_cast, y = scale_5_cast);
            tensor<fp16, []> var_78_to_fp16 = const()[name = tensor<string, []>("op_78_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_79_cast = mul(x = x_5_cast, y = var_78_to_fp16);
            tensor<int32, [1]> var_80 = const()[name = tensor<string, []>("op_80"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_1_cast = reduce_sum(axes = var_80, keep_dims = var_47, x = var_79_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_1_cast = add(x = x_5_cast, y = x_mean_1_cast);
            tensor<fp16, []> var_83_to_fp16 = const()[name = tensor<string, []>("op_83_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_84_cast = mul(x = x_zero_mean_1_cast, y = var_83_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_85_cast = mul(x = var_84_cast, y = x_zero_mean_1_cast);
            tensor<int32, [1]> var_86 = const()[name = tensor<string, []>("op_86"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_1_cast = reduce_sum(axes = var_86, keep_dims = var_47, x = var_85_cast);
            tensor<fp16, []> var_88_to_fp16 = const()[name = tensor<string, []>("op_88_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_89_cast = add(x = x_var_1_cast, y = var_88_to_fp16);
            tensor<fp16, []> var_90_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_90_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_90_cast = rsqrt(epsilon = var_90_epsilon_0_to_fp16, x = var_89_cast);
            tensor<fp16, [1, 256, 1, 64]> var_91_cast = mul(x = x_zero_mean_1_cast, y = var_90_cast);
            tensor<fp16, [256]> x_7_mean_0_to_fp16 = const()[name = tensor<string, []>("x_7_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1554304)))];
            tensor<fp16, [256]> x_7_variance_0_to_fp16 = const()[name = tensor<string, []>("x_7_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1554880)))];
            tensor<fp16, [256]> x_7_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_7_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1555456)))];
            tensor<fp16, [256]> x_7_beta_0_to_fp16 = const()[name = tensor<string, []>("x_7_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1556032)))];
            tensor<fp16, []> x_7_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_7_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_7_cast = batch_norm(beta = x_7_beta_0_to_fp16, epsilon = x_7_epsilon_0_to_fp16, gamma = x_7_gamma_0_to_fp16, mean = x_7_mean_0_to_fp16, variance = x_7_variance_0_to_fp16, x = var_91_cast);
            tensor<int32, [2]> var_118 = const()[name = tensor<string, []>("op_118"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_120 = const()[name = tensor<string, []>("op_120"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> y_1_pad_type_0 = const()[name = tensor<string, []>("y_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> y_1_pad_0 = const()[name = tensor<string, []>("y_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_124_weight_0_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_124_weight_0_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1556608))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1622528))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1622208)))];
            tensor<fp16, [256]> var_124_bias_0_to_fp16 = const()[name = tensor<string, []>("op_124_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1623104)))];
            tensor<fp16, [1, 256, 1, 64]> var_124_cast = conv(bias = var_124_bias_0_to_fp16, dilations = var_120, groups = var_48, pad = y_1_pad_0, pad_type = y_1_pad_type_0, strides = var_118, weight = op_124_weight_0_to_fp16_affine_quantized, x = x_7_cast);
            tensor<int32, [8]> tile_0 = const()[name = tensor<string, []>("tile_0"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_125_axis_0 = const()[name = tensor<string, []>("op_125_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_125_cast_0, tensor<fp16, [1, 32, 1, 64]> var_125_cast_1, tensor<fp16, [1, 32, 1, 64]> var_125_cast_2, tensor<fp16, [1, 32, 1, 64]> var_125_cast_3, tensor<fp16, [1, 32, 1, 64]> var_125_cast_4, tensor<fp16, [1, 32, 1, 64]> var_125_cast_5, tensor<fp16, [1, 32, 1, 64]> var_125_cast_6, tensor<fp16, [1, 32, 1, 64]> var_125_cast_7 = split(axis = var_125_axis_0, split_sizes = tile_0, x = var_124_cast);
            tensor<int32, [2]> var_138 = const()[name = tensor<string, []>("op_138"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_140 = const()[name = tensor<string, []>("op_140"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_142_pad_type_0 = const()[name = tensor<string, []>("op_142_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_142_pad_0 = const()[name = tensor<string, []>("op_142_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_137_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_137_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1623680))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1689600))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1689280)))];
            tensor<fp16, [256]> encoders_0_self_attn_linear_v_bias_to_fp16 = const()[name = tensor<string, []>("encoders_0_self_attn_linear_v_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1690176)))];
            tensor<fp16, [1, 256, 1, 64]> var_142_cast = conv(bias = encoders_0_self_attn_linear_v_bias_to_fp16, dilations = var_140, groups = var_48, pad = var_142_pad_0, pad_type = var_142_pad_type_0, strides = var_138, weight = op_137_to_fp16_affine_quantized, x = x_7_cast);
            tensor<int32, [8]> tile_1 = const()[name = tensor<string, []>("tile_1"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_143_axis_0 = const()[name = tensor<string, []>("op_143_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_143_cast_0, tensor<fp16, [1, 32, 1, 64]> var_143_cast_1, tensor<fp16, [1, 32, 1, 64]> var_143_cast_2, tensor<fp16, [1, 32, 1, 64]> var_143_cast_3, tensor<fp16, [1, 32, 1, 64]> var_143_cast_4, tensor<fp16, [1, 32, 1, 64]> var_143_cast_5, tensor<fp16, [1, 32, 1, 64]> var_143_cast_6, tensor<fp16, [1, 32, 1, 64]> var_143_cast_7 = split(axis = var_143_axis_0, split_sizes = tile_1, x = var_142_cast);
            tensor<int32, [4]> var_152_perm_0 = const()[name = tensor<string, []>("op_152_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<string, []> var_159_equation_0 = const()[name = tensor<string, []>("op_159_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 256, 1, 256]> op_156_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_156_to_fp16_affine_quantized"), quantized_data = tensor<int8, [1, 256, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1690752))), scale = tensor<fp16, []>(0.00276184082), zero_point = tensor<int8, []>(0)];
            tensor<fp16, [1, 64, 1, 256]> transpose_8 = transpose(perm = var_152_perm_0, x = x_7_cast);
            tensor<fp16, [1, 64, 1, 256]> var_159_cast = einsum(equation = var_159_equation_0, values = (transpose_8, op_156_to_fp16_affine_quantized));
            tensor<fp16, [256]> encoders_0_self_attn_linear_k_bias_to_fp16 = const()[name = tensor<string, []>("encoders_0_self_attn_linear_k_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1756352)))];
            tensor<fp16, [1, 64, 1, 256]> var_160_cast = add(x = var_159_cast, y = encoders_0_self_attn_linear_k_bias_to_fp16);
            tensor<int32, [8]> tile_2 = const()[name = tensor<string, []>("tile_2"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_161_axis_0 = const()[name = tensor<string, []>("op_161_axis_0"), val = tensor<int32, []>(-1)];
            tensor<fp16, [1, 64, 1, 32]> var_161_cast_0, tensor<fp16, [1, 64, 1, 32]> var_161_cast_1, tensor<fp16, [1, 64, 1, 32]> var_161_cast_2, tensor<fp16, [1, 64, 1, 32]> var_161_cast_3, tensor<fp16, [1, 64, 1, 32]> var_161_cast_4, tensor<fp16, [1, 64, 1, 32]> var_161_cast_5, tensor<fp16, [1, 64, 1, 32]> var_161_cast_6, tensor<fp16, [1, 64, 1, 32]> var_161_cast_7 = split(axis = var_161_axis_0, split_sizes = tile_2, x = var_160_cast);
            tensor<string, []> s_1_equation_0 = const()[name = tensor<string, []>("s_1_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_1_cast = einsum(equation = s_1_equation_0, values = (var_161_cast_0, var_125_cast_0));
            tensor<string, []> s_3_equation_0 = const()[name = tensor<string, []>("s_3_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_3_cast = einsum(equation = s_3_equation_0, values = (var_161_cast_1, var_125_cast_1));
            tensor<string, []> s_5_equation_0 = const()[name = tensor<string, []>("s_5_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_5_cast = einsum(equation = s_5_equation_0, values = (var_161_cast_2, var_125_cast_2));
            tensor<string, []> s_7_equation_0 = const()[name = tensor<string, []>("s_7_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_7_cast = einsum(equation = s_7_equation_0, values = (var_161_cast_3, var_125_cast_3));
            tensor<string, []> s_9_equation_0 = const()[name = tensor<string, []>("s_9_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_9_cast = einsum(equation = s_9_equation_0, values = (var_161_cast_4, var_125_cast_4));
            tensor<string, []> s_11_equation_0 = const()[name = tensor<string, []>("s_11_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_11_cast = einsum(equation = s_11_equation_0, values = (var_161_cast_5, var_125_cast_5));
            tensor<string, []> s_13_equation_0 = const()[name = tensor<string, []>("s_13_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_13_cast = einsum(equation = s_13_equation_0, values = (var_161_cast_6, var_125_cast_6));
            tensor<string, []> s_15_equation_0 = const()[name = tensor<string, []>("s_15_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_15_cast = einsum(equation = s_15_equation_0, values = (var_161_cast_7, var_125_cast_7));
            tensor<fp16, []> var_186_promoted_to_fp16 = const()[name = tensor<string, []>("op_186_promoted_to_fp16"), val = tensor<fp16, []>(1)];
            tensor<fp16, [1, 64, 1, 1]> var_187_cast = sub(x = mask_cast, y = var_186_promoted_to_fp16);
            tensor<fp16, []> var_188_to_fp16 = const()[name = tensor<string, []>("op_188_to_fp16"), val = tensor<fp16, []>(32096)];
            tensor<fp16, [1, 64, 1, 1]> inf_mask_1_cast = mul(x = var_187_cast, y = var_188_to_fp16);
            tensor<fp16, [1, 64, 1, 64]> s_17_cast = add(x = inf_mask_1_cast, y = s_1_cast);
            tensor<fp16, [1, 64, 1, 64]> s_19_cast = add(x = inf_mask_1_cast, y = s_3_cast);
            tensor<fp16, [1, 64, 1, 64]> s_21_cast = add(x = inf_mask_1_cast, y = s_5_cast);
            tensor<fp16, [1, 64, 1, 64]> s_23_cast = add(x = inf_mask_1_cast, y = s_7_cast);
            tensor<fp16, [1, 64, 1, 64]> s_25_cast = add(x = inf_mask_1_cast, y = s_9_cast);
            tensor<fp16, [1, 64, 1, 64]> s_27_cast = add(x = inf_mask_1_cast, y = s_11_cast);
            tensor<fp16, [1, 64, 1, 64]> s_29_cast = add(x = inf_mask_1_cast, y = s_13_cast);
            tensor<fp16, [1, 64, 1, 64]> s_31_cast = add(x = inf_mask_1_cast, y = s_15_cast);
            tensor<fp16, [1, 64, 1, 64]> input_5_cast = softmax(axis = var_48, x = s_17_cast);
            tensor<fp16, [1, 64, 1, 64]> input_7_cast = softmax(axis = var_48, x = s_19_cast);
            tensor<fp16, [1, 64, 1, 64]> input_9_cast = softmax(axis = var_48, x = s_21_cast);
            tensor<fp16, [1, 64, 1, 64]> input_11_cast = softmax(axis = var_48, x = s_23_cast);
            tensor<fp16, [1, 64, 1, 64]> input_13_cast = softmax(axis = var_48, x = s_25_cast);
            tensor<fp16, [1, 64, 1, 64]> input_15_cast = softmax(axis = var_48, x = s_27_cast);
            tensor<fp16, [1, 64, 1, 64]> input_17_cast = softmax(axis = var_48, x = s_29_cast);
            tensor<fp16, [1, 64, 1, 64]> input_19_cast = softmax(axis = var_48, x = s_31_cast);
            tensor<string, []> var_215_equation_0 = const()[name = tensor<string, []>("op_215_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_215_cast = einsum(equation = var_215_equation_0, values = (var_143_cast_0, input_5_cast));
            tensor<string, []> var_217_equation_0 = const()[name = tensor<string, []>("op_217_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_217_cast = einsum(equation = var_217_equation_0, values = (var_143_cast_1, input_7_cast));
            tensor<string, []> var_219_equation_0 = const()[name = tensor<string, []>("op_219_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_219_cast = einsum(equation = var_219_equation_0, values = (var_143_cast_2, input_9_cast));
            tensor<string, []> var_221_equation_0 = const()[name = tensor<string, []>("op_221_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_221_cast = einsum(equation = var_221_equation_0, values = (var_143_cast_3, input_11_cast));
            tensor<string, []> var_223_equation_0 = const()[name = tensor<string, []>("op_223_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_223_cast = einsum(equation = var_223_equation_0, values = (var_143_cast_4, input_13_cast));
            tensor<string, []> var_225_equation_0 = const()[name = tensor<string, []>("op_225_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_225_cast = einsum(equation = var_225_equation_0, values = (var_143_cast_5, input_15_cast));
            tensor<string, []> var_227_equation_0 = const()[name = tensor<string, []>("op_227_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_227_cast = einsum(equation = var_227_equation_0, values = (var_143_cast_6, input_17_cast));
            tensor<string, []> var_229_equation_0 = const()[name = tensor<string, []>("op_229_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_229_cast = einsum(equation = var_229_equation_0, values = (var_143_cast_7, input_19_cast));
            tensor<bool, []> y_3_interleave_0 = const()[name = tensor<string, []>("y_3_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 256, 1, 64]> y_3_cast = concat(axis = var_48, interleave = y_3_interleave_0, values = (var_215_cast, var_217_cast, var_219_cast, var_221_cast, var_223_cast, var_225_cast, var_227_cast, var_229_cast));
            tensor<int32, [2]> var_236 = const()[name = tensor<string, []>("op_236"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_238 = const()[name = tensor<string, []>("op_238"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_21_pad_type_0 = const()[name = tensor<string, []>("input_21_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_21_pad_0 = const()[name = tensor<string, []>("input_21_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_235_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_235_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1756928))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1822848))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1822528)))];
            tensor<fp16, [256]> encoders_0_self_attn_linear_out_bias_to_fp16 = const()[name = tensor<string, []>("encoders_0_self_attn_linear_out_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1823424)))];
            tensor<fp16, [1, 256, 1, 64]> input_21_cast = conv(bias = encoders_0_self_attn_linear_out_bias_to_fp16, dilations = var_238, groups = var_48, pad = input_21_pad_0, pad_type = input_21_pad_type_0, strides = var_236, weight = op_235_to_fp16_affine_quantized, x = y_3_cast);
            tensor<fp16, [1, 256, 1, 64]> x_9_cast = add(x = x_3_cast, y = input_21_cast);
            tensor<fp16, [1, 256, 1, 64]> var_246_cast = abs(x = x_9_cast);
            tensor<fp16, []> var_247_to_fp16 = const()[name = tensor<string, []>("op_247_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_248_cast = mul(x = var_246_cast, y = var_247_to_fp16);
            tensor<int32, [1]> var_249 = const()[name = tensor<string, []>("op_249"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_7_cast = reduce_sum(axes = var_249, keep_dims = var_47, x = var_248_cast);
            tensor<fp16, []> scale_9_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_9_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_9_cast = rsqrt(epsilon = scale_9_epsilon_0_to_fp16, x = scale_7_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_11_cast = mul(x = scale_9_cast, y = scale_9_cast);
            tensor<fp16, [1, 256, 1, 64]> x_11_cast = mul(x = x_9_cast, y = scale_11_cast);
            tensor<fp16, []> var_254_to_fp16 = const()[name = tensor<string, []>("op_254_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_255_cast = mul(x = x_11_cast, y = var_254_to_fp16);
            tensor<int32, [1]> var_256 = const()[name = tensor<string, []>("op_256"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_3_cast = reduce_sum(axes = var_256, keep_dims = var_47, x = var_255_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_3_cast = add(x = x_11_cast, y = x_mean_3_cast);
            tensor<fp16, []> var_259_to_fp16 = const()[name = tensor<string, []>("op_259_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_260_cast = mul(x = x_zero_mean_3_cast, y = var_259_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_261_cast = mul(x = var_260_cast, y = x_zero_mean_3_cast);
            tensor<int32, [1]> var_262 = const()[name = tensor<string, []>("op_262"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_3_cast = reduce_sum(axes = var_262, keep_dims = var_47, x = var_261_cast);
            tensor<fp16, []> var_264_to_fp16 = const()[name = tensor<string, []>("op_264_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_265_cast = add(x = x_var_3_cast, y = var_264_to_fp16);
            tensor<fp16, []> var_266_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_266_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_266_cast = rsqrt(epsilon = var_266_epsilon_0_to_fp16, x = var_265_cast);
            tensor<fp16, [1, 256, 1, 64]> var_267_cast = mul(x = x_zero_mean_3_cast, y = var_266_cast);
            tensor<fp16, [256]> x_13_mean_0_to_fp16 = const()[name = tensor<string, []>("x_13_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1824000)))];
            tensor<fp16, [256]> x_13_variance_0_to_fp16 = const()[name = tensor<string, []>("x_13_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1824576)))];
            tensor<fp16, [256]> x_13_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_13_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1825152)))];
            tensor<fp16, [256]> x_13_beta_0_to_fp16 = const()[name = tensor<string, []>("x_13_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1825728)))];
            tensor<fp16, []> x_13_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_13_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_13_cast = batch_norm(beta = x_13_beta_0_to_fp16, epsilon = x_13_epsilon_0_to_fp16, gamma = x_13_gamma_0_to_fp16, mean = x_13_mean_0_to_fp16, variance = x_13_variance_0_to_fp16, x = var_267_cast);
            tensor<int32, [2]> var_278 = const()[name = tensor<string, []>("op_278"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_280 = const()[name = tensor<string, []>("op_280"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_23_pad_type_0 = const()[name = tensor<string, []>("input_23_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_23_pad_0 = const()[name = tensor<string, []>("input_23_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 256, 1, 1]> op_277_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_277_to_fp16_affine_quantized"), quantized_data = tensor<int8, [512, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1826304))), scale = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1958016))), zero_point = tensor<int8, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1957440)))];
            tensor<fp16, [512]> encoders_0_feed_forward_w_1_bias_to_fp16 = const()[name = tensor<string, []>("encoders_0_feed_forward_w_1_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1959104)))];
            tensor<fp16, [1, 512, 1, 64]> input_23_cast = conv(bias = encoders_0_feed_forward_w_1_bias_to_fp16, dilations = var_280, groups = var_48, pad = input_23_pad_0, pad_type = input_23_pad_type_0, strides = var_278, weight = op_277_to_fp16_affine_quantized, x = x_13_cast);
            tensor<fp16, [1, 512, 1, 64]> input_25_cast = relu(x = input_23_cast);
            tensor<int32, [2]> var_289 = const()[name = tensor<string, []>("op_289"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_291 = const()[name = tensor<string, []>("op_291"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_293_pad_type_0 = const()[name = tensor<string, []>("op_293_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_293_pad_0 = const()[name = tensor<string, []>("op_293_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 512, 1, 1]> op_288_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_288_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1960192))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2091648))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2091328)))];
            tensor<fp16, [256]> encoders_0_feed_forward_w_2_bias_to_fp16 = const()[name = tensor<string, []>("encoders_0_feed_forward_w_2_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2092224)))];
            tensor<fp16, [1, 256, 1, 64]> var_293_cast = conv(bias = encoders_0_feed_forward_w_2_bias_to_fp16, dilations = var_291, groups = var_48, pad = var_293_pad_0, pad_type = var_293_pad_type_0, strides = var_289, weight = op_288_to_fp16_affine_quantized, x = input_25_cast);
            tensor<fp16, [1, 256, 1, 64]> x_17_cast = add(x = x_9_cast, y = var_293_cast);
            tensor<bool, []> var_309 = const()[name = tensor<string, []>("op_309"), val = tensor<bool, []>(true)];
            tensor<int32, []> var_310 = const()[name = tensor<string, []>("op_310"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 256, 1, 64]> var_332_cast = abs(x = x_17_cast);
            tensor<fp16, []> var_333_to_fp16 = const()[name = tensor<string, []>("op_333_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_334_cast = mul(x = var_332_cast, y = var_333_to_fp16);
            tensor<int32, [1]> var_335 = const()[name = tensor<string, []>("op_335"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_13_cast = reduce_sum(axes = var_335, keep_dims = var_309, x = var_334_cast);
            tensor<fp16, []> scale_15_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_15_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_15_cast = rsqrt(epsilon = scale_15_epsilon_0_to_fp16, x = scale_13_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_17_cast = mul(x = scale_15_cast, y = scale_15_cast);
            tensor<fp16, [1, 256, 1, 64]> x_19_cast = mul(x = x_17_cast, y = scale_17_cast);
            tensor<fp16, []> var_340_to_fp16 = const()[name = tensor<string, []>("op_340_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_341_cast = mul(x = x_19_cast, y = var_340_to_fp16);
            tensor<int32, [1]> var_342 = const()[name = tensor<string, []>("op_342"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_5_cast = reduce_sum(axes = var_342, keep_dims = var_309, x = var_341_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_5_cast = add(x = x_19_cast, y = x_mean_5_cast);
            tensor<fp16, []> var_345_to_fp16 = const()[name = tensor<string, []>("op_345_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_346_cast = mul(x = x_zero_mean_5_cast, y = var_345_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_347_cast = mul(x = var_346_cast, y = x_zero_mean_5_cast);
            tensor<int32, [1]> var_348 = const()[name = tensor<string, []>("op_348"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_5_cast = reduce_sum(axes = var_348, keep_dims = var_309, x = var_347_cast);
            tensor<fp16, []> var_350_to_fp16 = const()[name = tensor<string, []>("op_350_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_351_cast = add(x = x_var_5_cast, y = var_350_to_fp16);
            tensor<fp16, []> var_352_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_352_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_352_cast = rsqrt(epsilon = var_352_epsilon_0_to_fp16, x = var_351_cast);
            tensor<fp16, [1, 256, 1, 64]> var_353_cast = mul(x = x_zero_mean_5_cast, y = var_352_cast);
            tensor<fp16, [256]> x_21_mean_0_to_fp16 = const()[name = tensor<string, []>("x_21_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2092800)))];
            tensor<fp16, [256]> x_21_variance_0_to_fp16 = const()[name = tensor<string, []>("x_21_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2093376)))];
            tensor<fp16, [256]> x_21_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_21_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2093952)))];
            tensor<fp16, [256]> x_21_beta_0_to_fp16 = const()[name = tensor<string, []>("x_21_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2094528)))];
            tensor<fp16, []> x_21_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_21_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_21_cast = batch_norm(beta = x_21_beta_0_to_fp16, epsilon = x_21_epsilon_0_to_fp16, gamma = x_21_gamma_0_to_fp16, mean = x_21_mean_0_to_fp16, variance = x_21_variance_0_to_fp16, x = var_353_cast);
            tensor<int32, [2]> var_380 = const()[name = tensor<string, []>("op_380"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_382 = const()[name = tensor<string, []>("op_382"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> y_5_pad_type_0 = const()[name = tensor<string, []>("y_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> y_5_pad_0 = const()[name = tensor<string, []>("y_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_386_weight_0_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_386_weight_0_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2095104))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2161024))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2160704)))];
            tensor<fp16, [256]> var_386_bias_0_to_fp16 = const()[name = tensor<string, []>("op_386_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2161600)))];
            tensor<fp16, [1, 256, 1, 64]> var_386_cast = conv(bias = var_386_bias_0_to_fp16, dilations = var_382, groups = var_310, pad = y_5_pad_0, pad_type = y_5_pad_type_0, strides = var_380, weight = op_386_weight_0_to_fp16_affine_quantized, x = x_21_cast);
            tensor<int32, [8]> tile_3 = const()[name = tensor<string, []>("tile_3"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_387_axis_0 = const()[name = tensor<string, []>("op_387_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_387_cast_0, tensor<fp16, [1, 32, 1, 64]> var_387_cast_1, tensor<fp16, [1, 32, 1, 64]> var_387_cast_2, tensor<fp16, [1, 32, 1, 64]> var_387_cast_3, tensor<fp16, [1, 32, 1, 64]> var_387_cast_4, tensor<fp16, [1, 32, 1, 64]> var_387_cast_5, tensor<fp16, [1, 32, 1, 64]> var_387_cast_6, tensor<fp16, [1, 32, 1, 64]> var_387_cast_7 = split(axis = var_387_axis_0, split_sizes = tile_3, x = var_386_cast);
            tensor<int32, [2]> var_400 = const()[name = tensor<string, []>("op_400"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_402 = const()[name = tensor<string, []>("op_402"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_404_pad_type_0 = const()[name = tensor<string, []>("op_404_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_404_pad_0 = const()[name = tensor<string, []>("op_404_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_399_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_399_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2162176))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2228096))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2227776)))];
            tensor<fp16, [256]> encoders_1_self_attn_linear_v_bias_to_fp16 = const()[name = tensor<string, []>("encoders_1_self_attn_linear_v_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2228672)))];
            tensor<fp16, [1, 256, 1, 64]> var_404_cast = conv(bias = encoders_1_self_attn_linear_v_bias_to_fp16, dilations = var_402, groups = var_310, pad = var_404_pad_0, pad_type = var_404_pad_type_0, strides = var_400, weight = op_399_to_fp16_affine_quantized, x = x_21_cast);
            tensor<int32, [8]> tile_4 = const()[name = tensor<string, []>("tile_4"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_405_axis_0 = const()[name = tensor<string, []>("op_405_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_405_cast_0, tensor<fp16, [1, 32, 1, 64]> var_405_cast_1, tensor<fp16, [1, 32, 1, 64]> var_405_cast_2, tensor<fp16, [1, 32, 1, 64]> var_405_cast_3, tensor<fp16, [1, 32, 1, 64]> var_405_cast_4, tensor<fp16, [1, 32, 1, 64]> var_405_cast_5, tensor<fp16, [1, 32, 1, 64]> var_405_cast_6, tensor<fp16, [1, 32, 1, 64]> var_405_cast_7 = split(axis = var_405_axis_0, split_sizes = tile_4, x = var_404_cast);
            tensor<int32, [4]> var_414_perm_0 = const()[name = tensor<string, []>("op_414_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<string, []> var_421_equation_0 = const()[name = tensor<string, []>("op_421_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 256, 1, 256]> op_418_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_418_to_fp16_affine_quantized"), quantized_data = tensor<int8, [1, 256, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2229248))), scale = tensor<fp16, []>(0.00227165222), zero_point = tensor<int8, []>(0)];
            tensor<fp16, [1, 64, 1, 256]> transpose_7 = transpose(perm = var_414_perm_0, x = x_21_cast);
            tensor<fp16, [1, 64, 1, 256]> var_421_cast = einsum(equation = var_421_equation_0, values = (transpose_7, op_418_to_fp16_affine_quantized));
            tensor<fp16, [256]> encoders_1_self_attn_linear_k_bias_to_fp16 = const()[name = tensor<string, []>("encoders_1_self_attn_linear_k_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2294848)))];
            tensor<fp16, [1, 64, 1, 256]> var_422_cast = add(x = var_421_cast, y = encoders_1_self_attn_linear_k_bias_to_fp16);
            tensor<int32, [8]> tile_5 = const()[name = tensor<string, []>("tile_5"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_423_axis_0 = const()[name = tensor<string, []>("op_423_axis_0"), val = tensor<int32, []>(-1)];
            tensor<fp16, [1, 64, 1, 32]> var_423_cast_0, tensor<fp16, [1, 64, 1, 32]> var_423_cast_1, tensor<fp16, [1, 64, 1, 32]> var_423_cast_2, tensor<fp16, [1, 64, 1, 32]> var_423_cast_3, tensor<fp16, [1, 64, 1, 32]> var_423_cast_4, tensor<fp16, [1, 64, 1, 32]> var_423_cast_5, tensor<fp16, [1, 64, 1, 32]> var_423_cast_6, tensor<fp16, [1, 64, 1, 32]> var_423_cast_7 = split(axis = var_423_axis_0, split_sizes = tile_5, x = var_422_cast);
            tensor<string, []> s_33_equation_0 = const()[name = tensor<string, []>("s_33_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_33_cast = einsum(equation = s_33_equation_0, values = (var_423_cast_0, var_387_cast_0));
            tensor<string, []> s_35_equation_0 = const()[name = tensor<string, []>("s_35_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_35_cast = einsum(equation = s_35_equation_0, values = (var_423_cast_1, var_387_cast_1));
            tensor<string, []> s_37_equation_0 = const()[name = tensor<string, []>("s_37_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_37_cast = einsum(equation = s_37_equation_0, values = (var_423_cast_2, var_387_cast_2));
            tensor<string, []> s_39_equation_0 = const()[name = tensor<string, []>("s_39_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_39_cast = einsum(equation = s_39_equation_0, values = (var_423_cast_3, var_387_cast_3));
            tensor<string, []> s_41_equation_0 = const()[name = tensor<string, []>("s_41_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_41_cast = einsum(equation = s_41_equation_0, values = (var_423_cast_4, var_387_cast_4));
            tensor<string, []> s_43_equation_0 = const()[name = tensor<string, []>("s_43_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_43_cast = einsum(equation = s_43_equation_0, values = (var_423_cast_5, var_387_cast_5));
            tensor<string, []> s_45_equation_0 = const()[name = tensor<string, []>("s_45_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_45_cast = einsum(equation = s_45_equation_0, values = (var_423_cast_6, var_387_cast_6));
            tensor<string, []> s_47_equation_0 = const()[name = tensor<string, []>("s_47_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_47_cast = einsum(equation = s_47_equation_0, values = (var_423_cast_7, var_387_cast_7));
            tensor<fp16, [1, 64, 1, 64]> s_49_cast = add(x = inf_mask_1_cast, y = s_33_cast);
            tensor<fp16, [1, 64, 1, 64]> s_51_cast = add(x = inf_mask_1_cast, y = s_35_cast);
            tensor<fp16, [1, 64, 1, 64]> s_53_cast = add(x = inf_mask_1_cast, y = s_37_cast);
            tensor<fp16, [1, 64, 1, 64]> s_55_cast = add(x = inf_mask_1_cast, y = s_39_cast);
            tensor<fp16, [1, 64, 1, 64]> s_57_cast = add(x = inf_mask_1_cast, y = s_41_cast);
            tensor<fp16, [1, 64, 1, 64]> s_59_cast = add(x = inf_mask_1_cast, y = s_43_cast);
            tensor<fp16, [1, 64, 1, 64]> s_61_cast = add(x = inf_mask_1_cast, y = s_45_cast);
            tensor<fp16, [1, 64, 1, 64]> s_63_cast = add(x = inf_mask_1_cast, y = s_47_cast);
            tensor<fp16, [1, 64, 1, 64]> input_27_cast = softmax(axis = var_310, x = s_49_cast);
            tensor<fp16, [1, 64, 1, 64]> input_29_cast = softmax(axis = var_310, x = s_51_cast);
            tensor<fp16, [1, 64, 1, 64]> input_31_cast = softmax(axis = var_310, x = s_53_cast);
            tensor<fp16, [1, 64, 1, 64]> input_33_cast = softmax(axis = var_310, x = s_55_cast);
            tensor<fp16, [1, 64, 1, 64]> input_35_cast = softmax(axis = var_310, x = s_57_cast);
            tensor<fp16, [1, 64, 1, 64]> input_37_cast = softmax(axis = var_310, x = s_59_cast);
            tensor<fp16, [1, 64, 1, 64]> input_39_cast = softmax(axis = var_310, x = s_61_cast);
            tensor<fp16, [1, 64, 1, 64]> input_41_cast = softmax(axis = var_310, x = s_63_cast);
            tensor<string, []> var_477_equation_0 = const()[name = tensor<string, []>("op_477_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_477_cast = einsum(equation = var_477_equation_0, values = (var_405_cast_0, input_27_cast));
            tensor<string, []> var_479_equation_0 = const()[name = tensor<string, []>("op_479_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_479_cast = einsum(equation = var_479_equation_0, values = (var_405_cast_1, input_29_cast));
            tensor<string, []> var_481_equation_0 = const()[name = tensor<string, []>("op_481_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_481_cast = einsum(equation = var_481_equation_0, values = (var_405_cast_2, input_31_cast));
            tensor<string, []> var_483_equation_0 = const()[name = tensor<string, []>("op_483_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_483_cast = einsum(equation = var_483_equation_0, values = (var_405_cast_3, input_33_cast));
            tensor<string, []> var_485_equation_0 = const()[name = tensor<string, []>("op_485_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_485_cast = einsum(equation = var_485_equation_0, values = (var_405_cast_4, input_35_cast));
            tensor<string, []> var_487_equation_0 = const()[name = tensor<string, []>("op_487_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_487_cast = einsum(equation = var_487_equation_0, values = (var_405_cast_5, input_37_cast));
            tensor<string, []> var_489_equation_0 = const()[name = tensor<string, []>("op_489_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_489_cast = einsum(equation = var_489_equation_0, values = (var_405_cast_6, input_39_cast));
            tensor<string, []> var_491_equation_0 = const()[name = tensor<string, []>("op_491_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_491_cast = einsum(equation = var_491_equation_0, values = (var_405_cast_7, input_41_cast));
            tensor<bool, []> y_7_interleave_0 = const()[name = tensor<string, []>("y_7_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 256, 1, 64]> y_7_cast = concat(axis = var_310, interleave = y_7_interleave_0, values = (var_477_cast, var_479_cast, var_481_cast, var_483_cast, var_485_cast, var_487_cast, var_489_cast, var_491_cast));
            tensor<int32, [2]> var_498 = const()[name = tensor<string, []>("op_498"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_500 = const()[name = tensor<string, []>("op_500"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_43_pad_type_0 = const()[name = tensor<string, []>("input_43_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_43_pad_0 = const()[name = tensor<string, []>("input_43_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_497_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_497_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2295424))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2361344))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2361024)))];
            tensor<fp16, [256]> encoders_1_self_attn_linear_out_bias_to_fp16 = const()[name = tensor<string, []>("encoders_1_self_attn_linear_out_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2361920)))];
            tensor<fp16, [1, 256, 1, 64]> input_43_cast = conv(bias = encoders_1_self_attn_linear_out_bias_to_fp16, dilations = var_500, groups = var_310, pad = input_43_pad_0, pad_type = input_43_pad_type_0, strides = var_498, weight = op_497_to_fp16_affine_quantized, x = y_7_cast);
            tensor<fp16, [1, 256, 1, 64]> x_23_cast = add(x = x_17_cast, y = input_43_cast);
            tensor<fp16, [1, 256, 1, 64]> var_505_cast = abs(x = x_23_cast);
            tensor<fp16, []> var_506_to_fp16 = const()[name = tensor<string, []>("op_506_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_507_cast = mul(x = var_505_cast, y = var_506_to_fp16);
            tensor<int32, [1]> var_508 = const()[name = tensor<string, []>("op_508"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_19_cast = reduce_sum(axes = var_508, keep_dims = var_309, x = var_507_cast);
            tensor<fp16, []> scale_21_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_21_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_21_cast = rsqrt(epsilon = scale_21_epsilon_0_to_fp16, x = scale_19_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_23_cast = mul(x = scale_21_cast, y = scale_21_cast);
            tensor<fp16, [1, 256, 1, 64]> x_25_cast = mul(x = x_23_cast, y = scale_23_cast);
            tensor<fp16, []> var_513_to_fp16 = const()[name = tensor<string, []>("op_513_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_514_cast = mul(x = x_25_cast, y = var_513_to_fp16);
            tensor<int32, [1]> var_515 = const()[name = tensor<string, []>("op_515"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_7_cast = reduce_sum(axes = var_515, keep_dims = var_309, x = var_514_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_7_cast = add(x = x_25_cast, y = x_mean_7_cast);
            tensor<fp16, []> var_518_to_fp16 = const()[name = tensor<string, []>("op_518_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_519_cast = mul(x = x_zero_mean_7_cast, y = var_518_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_520_cast = mul(x = var_519_cast, y = x_zero_mean_7_cast);
            tensor<int32, [1]> var_521 = const()[name = tensor<string, []>("op_521"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_7_cast = reduce_sum(axes = var_521, keep_dims = var_309, x = var_520_cast);
            tensor<fp16, []> var_523_to_fp16 = const()[name = tensor<string, []>("op_523_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_524_cast = add(x = x_var_7_cast, y = var_523_to_fp16);
            tensor<fp16, []> var_525_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_525_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_525_cast = rsqrt(epsilon = var_525_epsilon_0_to_fp16, x = var_524_cast);
            tensor<fp16, [1, 256, 1, 64]> var_526_cast = mul(x = x_zero_mean_7_cast, y = var_525_cast);
            tensor<fp16, [256]> x_27_mean_0_to_fp16 = const()[name = tensor<string, []>("x_27_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2362496)))];
            tensor<fp16, [256]> x_27_variance_0_to_fp16 = const()[name = tensor<string, []>("x_27_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2363072)))];
            tensor<fp16, [256]> x_27_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_27_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2363648)))];
            tensor<fp16, [256]> x_27_beta_0_to_fp16 = const()[name = tensor<string, []>("x_27_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2364224)))];
            tensor<fp16, []> x_27_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_27_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_27_cast = batch_norm(beta = x_27_beta_0_to_fp16, epsilon = x_27_epsilon_0_to_fp16, gamma = x_27_gamma_0_to_fp16, mean = x_27_mean_0_to_fp16, variance = x_27_variance_0_to_fp16, x = var_526_cast);
            tensor<int32, [2]> var_537 = const()[name = tensor<string, []>("op_537"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_539 = const()[name = tensor<string, []>("op_539"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_45_pad_type_0 = const()[name = tensor<string, []>("input_45_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_45_pad_0 = const()[name = tensor<string, []>("input_45_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 256, 1, 1]> op_536_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_536_to_fp16_affine_quantized"), quantized_data = tensor<int8, [512, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2364800))), scale = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2496512))), zero_point = tensor<int8, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2495936)))];
            tensor<fp16, [512]> encoders_1_feed_forward_w_1_bias_to_fp16 = const()[name = tensor<string, []>("encoders_1_feed_forward_w_1_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2497600)))];
            tensor<fp16, [1, 512, 1, 64]> input_45_cast = conv(bias = encoders_1_feed_forward_w_1_bias_to_fp16, dilations = var_539, groups = var_310, pad = input_45_pad_0, pad_type = input_45_pad_type_0, strides = var_537, weight = op_536_to_fp16_affine_quantized, x = x_27_cast);
            tensor<fp16, [1, 512, 1, 64]> input_47_cast = relu(x = input_45_cast);
            tensor<int32, [2]> var_548 = const()[name = tensor<string, []>("op_548"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_550 = const()[name = tensor<string, []>("op_550"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_552_pad_type_0 = const()[name = tensor<string, []>("op_552_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_552_pad_0 = const()[name = tensor<string, []>("op_552_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 512, 1, 1]> op_547_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_547_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2498688))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2630144))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2629824)))];
            tensor<fp16, [256]> encoders_1_feed_forward_w_2_bias_to_fp16 = const()[name = tensor<string, []>("encoders_1_feed_forward_w_2_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2630720)))];
            tensor<fp16, [1, 256, 1, 64]> var_552_cast = conv(bias = encoders_1_feed_forward_w_2_bias_to_fp16, dilations = var_550, groups = var_310, pad = var_552_pad_0, pad_type = var_552_pad_type_0, strides = var_548, weight = op_547_to_fp16_affine_quantized, x = input_47_cast);
            tensor<fp16, [1, 256, 1, 64]> x_31_cast = add(x = x_23_cast, y = var_552_cast);
            tensor<bool, []> var_565 = const()[name = tensor<string, []>("op_565"), val = tensor<bool, []>(true)];
            tensor<int32, []> var_566 = const()[name = tensor<string, []>("op_566"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 256, 1, 64]> var_588_cast = abs(x = x_31_cast);
            tensor<fp16, []> var_589_to_fp16 = const()[name = tensor<string, []>("op_589_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_590_cast = mul(x = var_588_cast, y = var_589_to_fp16);
            tensor<int32, [1]> var_591 = const()[name = tensor<string, []>("op_591"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_25_cast = reduce_sum(axes = var_591, keep_dims = var_565, x = var_590_cast);
            tensor<fp16, []> scale_27_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_27_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_27_cast = rsqrt(epsilon = scale_27_epsilon_0_to_fp16, x = scale_25_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_29_cast = mul(x = scale_27_cast, y = scale_27_cast);
            tensor<fp16, [1, 256, 1, 64]> x_33_cast = mul(x = x_31_cast, y = scale_29_cast);
            tensor<fp16, []> var_596_to_fp16 = const()[name = tensor<string, []>("op_596_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_597_cast = mul(x = x_33_cast, y = var_596_to_fp16);
            tensor<int32, [1]> var_598 = const()[name = tensor<string, []>("op_598"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_9_cast = reduce_sum(axes = var_598, keep_dims = var_565, x = var_597_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_9_cast = add(x = x_33_cast, y = x_mean_9_cast);
            tensor<fp16, []> var_601_to_fp16 = const()[name = tensor<string, []>("op_601_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_602_cast = mul(x = x_zero_mean_9_cast, y = var_601_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_603_cast = mul(x = var_602_cast, y = x_zero_mean_9_cast);
            tensor<int32, [1]> var_604 = const()[name = tensor<string, []>("op_604"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_9_cast = reduce_sum(axes = var_604, keep_dims = var_565, x = var_603_cast);
            tensor<fp16, []> var_606_to_fp16 = const()[name = tensor<string, []>("op_606_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_607_cast = add(x = x_var_9_cast, y = var_606_to_fp16);
            tensor<fp16, []> var_608_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_608_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_608_cast = rsqrt(epsilon = var_608_epsilon_0_to_fp16, x = var_607_cast);
            tensor<fp16, [1, 256, 1, 64]> var_609_cast = mul(x = x_zero_mean_9_cast, y = var_608_cast);
            tensor<fp16, [256]> x_35_mean_0_to_fp16 = const()[name = tensor<string, []>("x_35_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2631296)))];
            tensor<fp16, [256]> x_35_variance_0_to_fp16 = const()[name = tensor<string, []>("x_35_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2631872)))];
            tensor<fp16, [256]> x_35_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_35_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2632448)))];
            tensor<fp16, [256]> x_35_beta_0_to_fp16 = const()[name = tensor<string, []>("x_35_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2633024)))];
            tensor<fp16, []> x_35_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_35_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_35_cast = batch_norm(beta = x_35_beta_0_to_fp16, epsilon = x_35_epsilon_0_to_fp16, gamma = x_35_gamma_0_to_fp16, mean = x_35_mean_0_to_fp16, variance = x_35_variance_0_to_fp16, x = var_609_cast);
            tensor<int32, [2]> var_636 = const()[name = tensor<string, []>("op_636"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_638 = const()[name = tensor<string, []>("op_638"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> y_9_pad_type_0 = const()[name = tensor<string, []>("y_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> y_9_pad_0 = const()[name = tensor<string, []>("y_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_642_weight_0_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_642_weight_0_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2633600))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2699520))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2699200)))];
            tensor<fp16, [256]> var_642_bias_0_to_fp16 = const()[name = tensor<string, []>("op_642_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2700096)))];
            tensor<fp16, [1, 256, 1, 64]> var_642_cast = conv(bias = var_642_bias_0_to_fp16, dilations = var_638, groups = var_566, pad = y_9_pad_0, pad_type = y_9_pad_type_0, strides = var_636, weight = op_642_weight_0_to_fp16_affine_quantized, x = x_35_cast);
            tensor<int32, [8]> tile_6 = const()[name = tensor<string, []>("tile_6"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_643_axis_0 = const()[name = tensor<string, []>("op_643_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_643_cast_0, tensor<fp16, [1, 32, 1, 64]> var_643_cast_1, tensor<fp16, [1, 32, 1, 64]> var_643_cast_2, tensor<fp16, [1, 32, 1, 64]> var_643_cast_3, tensor<fp16, [1, 32, 1, 64]> var_643_cast_4, tensor<fp16, [1, 32, 1, 64]> var_643_cast_5, tensor<fp16, [1, 32, 1, 64]> var_643_cast_6, tensor<fp16, [1, 32, 1, 64]> var_643_cast_7 = split(axis = var_643_axis_0, split_sizes = tile_6, x = var_642_cast);
            tensor<int32, [2]> var_656 = const()[name = tensor<string, []>("op_656"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_658 = const()[name = tensor<string, []>("op_658"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_660_pad_type_0 = const()[name = tensor<string, []>("op_660_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_660_pad_0 = const()[name = tensor<string, []>("op_660_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_655_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_655_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2700672))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2766592))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2766272)))];
            tensor<fp16, [256]> encoders_2_self_attn_linear_v_bias_to_fp16 = const()[name = tensor<string, []>("encoders_2_self_attn_linear_v_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2767168)))];
            tensor<fp16, [1, 256, 1, 64]> var_660_cast = conv(bias = encoders_2_self_attn_linear_v_bias_to_fp16, dilations = var_658, groups = var_566, pad = var_660_pad_0, pad_type = var_660_pad_type_0, strides = var_656, weight = op_655_to_fp16_affine_quantized, x = x_35_cast);
            tensor<int32, [8]> tile_7 = const()[name = tensor<string, []>("tile_7"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_661_axis_0 = const()[name = tensor<string, []>("op_661_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 32, 1, 64]> var_661_cast_0, tensor<fp16, [1, 32, 1, 64]> var_661_cast_1, tensor<fp16, [1, 32, 1, 64]> var_661_cast_2, tensor<fp16, [1, 32, 1, 64]> var_661_cast_3, tensor<fp16, [1, 32, 1, 64]> var_661_cast_4, tensor<fp16, [1, 32, 1, 64]> var_661_cast_5, tensor<fp16, [1, 32, 1, 64]> var_661_cast_6, tensor<fp16, [1, 32, 1, 64]> var_661_cast_7 = split(axis = var_661_axis_0, split_sizes = tile_7, x = var_660_cast);
            tensor<int32, [4]> var_670_perm_0 = const()[name = tensor<string, []>("op_670_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<string, []> var_677_equation_0 = const()[name = tensor<string, []>("op_677_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 256, 1, 256]> op_674_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_674_to_fp16_affine_quantized"), quantized_data = tensor<int8, [1, 256, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2767744))), scale = tensor<fp16, []>(0.00200462341), zero_point = tensor<int8, []>(0)];
            tensor<fp16, [1, 64, 1, 256]> transpose_6 = transpose(perm = var_670_perm_0, x = x_35_cast);
            tensor<fp16, [1, 64, 1, 256]> var_677_cast = einsum(equation = var_677_equation_0, values = (transpose_6, op_674_to_fp16_affine_quantized));
            tensor<fp16, [256]> encoders_2_self_attn_linear_k_bias_to_fp16 = const()[name = tensor<string, []>("encoders_2_self_attn_linear_k_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2833344)))];
            tensor<fp16, [1, 64, 1, 256]> var_678_cast = add(x = var_677_cast, y = encoders_2_self_attn_linear_k_bias_to_fp16);
            tensor<int32, [8]> tile_8 = const()[name = tensor<string, []>("tile_8"), val = tensor<int32, [8]>([32, 32, 32, 32, 32, 32, 32, 32])];
            tensor<int32, []> var_679_axis_0 = const()[name = tensor<string, []>("op_679_axis_0"), val = tensor<int32, []>(-1)];
            tensor<fp16, [1, 64, 1, 32]> var_679_cast_0, tensor<fp16, [1, 64, 1, 32]> var_679_cast_1, tensor<fp16, [1, 64, 1, 32]> var_679_cast_2, tensor<fp16, [1, 64, 1, 32]> var_679_cast_3, tensor<fp16, [1, 64, 1, 32]> var_679_cast_4, tensor<fp16, [1, 64, 1, 32]> var_679_cast_5, tensor<fp16, [1, 64, 1, 32]> var_679_cast_6, tensor<fp16, [1, 64, 1, 32]> var_679_cast_7 = split(axis = var_679_axis_0, split_sizes = tile_8, x = var_678_cast);
            tensor<string, []> s_65_equation_0 = const()[name = tensor<string, []>("s_65_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_65_cast = einsum(equation = s_65_equation_0, values = (var_679_cast_0, var_643_cast_0));
            tensor<string, []> s_67_equation_0 = const()[name = tensor<string, []>("s_67_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_67_cast = einsum(equation = s_67_equation_0, values = (var_679_cast_1, var_643_cast_1));
            tensor<string, []> s_69_equation_0 = const()[name = tensor<string, []>("s_69_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_69_cast = einsum(equation = s_69_equation_0, values = (var_679_cast_2, var_643_cast_2));
            tensor<string, []> s_71_equation_0 = const()[name = tensor<string, []>("s_71_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_71_cast = einsum(equation = s_71_equation_0, values = (var_679_cast_3, var_643_cast_3));
            tensor<string, []> s_73_equation_0 = const()[name = tensor<string, []>("s_73_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_73_cast = einsum(equation = s_73_equation_0, values = (var_679_cast_4, var_643_cast_4));
            tensor<string, []> s_75_equation_0 = const()[name = tensor<string, []>("s_75_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_75_cast = einsum(equation = s_75_equation_0, values = (var_679_cast_5, var_643_cast_5));
            tensor<string, []> s_77_equation_0 = const()[name = tensor<string, []>("s_77_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_77_cast = einsum(equation = s_77_equation_0, values = (var_679_cast_6, var_643_cast_6));
            tensor<string, []> s_79_equation_0 = const()[name = tensor<string, []>("s_79_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 64, 1, 64]> s_79_cast = einsum(equation = s_79_equation_0, values = (var_679_cast_7, var_643_cast_7));
            tensor<fp16, [1, 64, 1, 64]> s_81_cast = add(x = inf_mask_1_cast, y = s_65_cast);
            tensor<fp16, [1, 64, 1, 64]> s_83_cast = add(x = inf_mask_1_cast, y = s_67_cast);
            tensor<fp16, [1, 64, 1, 64]> s_85_cast = add(x = inf_mask_1_cast, y = s_69_cast);
            tensor<fp16, [1, 64, 1, 64]> s_87_cast = add(x = inf_mask_1_cast, y = s_71_cast);
            tensor<fp16, [1, 64, 1, 64]> s_89_cast = add(x = inf_mask_1_cast, y = s_73_cast);
            tensor<fp16, [1, 64, 1, 64]> s_91_cast = add(x = inf_mask_1_cast, y = s_75_cast);
            tensor<fp16, [1, 64, 1, 64]> s_93_cast = add(x = inf_mask_1_cast, y = s_77_cast);
            tensor<fp16, [1, 64, 1, 64]> s_cast = add(x = inf_mask_1_cast, y = s_79_cast);
            tensor<fp16, [1, 64, 1, 64]> input_49_cast = softmax(axis = var_566, x = s_81_cast);
            tensor<fp16, [1, 64, 1, 64]> input_51_cast = softmax(axis = var_566, x = s_83_cast);
            tensor<fp16, [1, 64, 1, 64]> input_53_cast = softmax(axis = var_566, x = s_85_cast);
            tensor<fp16, [1, 64, 1, 64]> input_55_cast = softmax(axis = var_566, x = s_87_cast);
            tensor<fp16, [1, 64, 1, 64]> input_57_cast = softmax(axis = var_566, x = s_89_cast);
            tensor<fp16, [1, 64, 1, 64]> input_59_cast = softmax(axis = var_566, x = s_91_cast);
            tensor<fp16, [1, 64, 1, 64]> input_61_cast = softmax(axis = var_566, x = s_93_cast);
            tensor<fp16, [1, 64, 1, 64]> input_63_cast = softmax(axis = var_566, x = s_cast);
            tensor<string, []> var_733_equation_0 = const()[name = tensor<string, []>("op_733_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_733_cast = einsum(equation = var_733_equation_0, values = (var_661_cast_0, input_49_cast));
            tensor<string, []> var_735_equation_0 = const()[name = tensor<string, []>("op_735_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_735_cast = einsum(equation = var_735_equation_0, values = (var_661_cast_1, input_51_cast));
            tensor<string, []> var_737_equation_0 = const()[name = tensor<string, []>("op_737_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_737_cast = einsum(equation = var_737_equation_0, values = (var_661_cast_2, input_53_cast));
            tensor<string, []> var_739_equation_0 = const()[name = tensor<string, []>("op_739_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_739_cast = einsum(equation = var_739_equation_0, values = (var_661_cast_3, input_55_cast));
            tensor<string, []> var_741_equation_0 = const()[name = tensor<string, []>("op_741_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_741_cast = einsum(equation = var_741_equation_0, values = (var_661_cast_4, input_57_cast));
            tensor<string, []> var_743_equation_0 = const()[name = tensor<string, []>("op_743_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_743_cast = einsum(equation = var_743_equation_0, values = (var_661_cast_5, input_59_cast));
            tensor<string, []> var_745_equation_0 = const()[name = tensor<string, []>("op_745_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_745_cast = einsum(equation = var_745_equation_0, values = (var_661_cast_6, input_61_cast));
            tensor<string, []> var_747_equation_0 = const()[name = tensor<string, []>("op_747_equation_0"), val = tensor<string, []>("bnhd,bdhm->bnhm")];
            tensor<fp16, [1, 32, 1, 64]> var_747_cast = einsum(equation = var_747_equation_0, values = (var_661_cast_7, input_63_cast));
            tensor<bool, []> y_interleave_0 = const()[name = tensor<string, []>("y_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 256, 1, 64]> y_cast = concat(axis = var_566, interleave = y_interleave_0, values = (var_733_cast, var_735_cast, var_737_cast, var_739_cast, var_741_cast, var_743_cast, var_745_cast, var_747_cast));
            tensor<int32, [2]> var_754 = const()[name = tensor<string, []>("op_754"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_756 = const()[name = tensor<string, []>("op_756"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_65_pad_type_0 = const()[name = tensor<string, []>("input_65_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_65_pad_0 = const()[name = tensor<string, []>("input_65_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 256, 1, 1]> op_753_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_753_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2833920))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2899840))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2899520)))];
            tensor<fp16, [256]> encoders_2_self_attn_linear_out_bias_to_fp16 = const()[name = tensor<string, []>("encoders_2_self_attn_linear_out_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2900416)))];
            tensor<fp16, [1, 256, 1, 64]> input_65_cast = conv(bias = encoders_2_self_attn_linear_out_bias_to_fp16, dilations = var_756, groups = var_566, pad = input_65_pad_0, pad_type = input_65_pad_type_0, strides = var_754, weight = op_753_to_fp16_affine_quantized, x = y_cast);
            tensor<fp16, [1, 256, 1, 64]> x_37_cast = add(x = x_31_cast, y = input_65_cast);
            tensor<fp16, [1, 256, 1, 64]> var_761_cast = abs(x = x_37_cast);
            tensor<fp16, []> var_762_to_fp16 = const()[name = tensor<string, []>("op_762_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_763_cast = mul(x = var_761_cast, y = var_762_to_fp16);
            tensor<int32, [1]> var_764 = const()[name = tensor<string, []>("op_764"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> scale_31_cast = reduce_sum(axes = var_764, keep_dims = var_565, x = var_763_cast);
            tensor<fp16, []> scale_33_epsilon_0_to_fp16 = const()[name = tensor<string, []>("scale_33_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> scale_33_cast = rsqrt(epsilon = scale_33_epsilon_0_to_fp16, x = scale_31_cast);
            tensor<fp16, [1, 1, 1, 64]> scale_cast = mul(x = scale_33_cast, y = scale_33_cast);
            tensor<fp16, [1, 256, 1, 64]> x_39_cast = mul(x = x_37_cast, y = scale_cast);
            tensor<fp16, []> var_769_to_fp16 = const()[name = tensor<string, []>("op_769_to_fp16"), val = tensor<fp16, []>(-0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_770_cast = mul(x = x_39_cast, y = var_769_to_fp16);
            tensor<int32, [1]> var_771 = const()[name = tensor<string, []>("op_771"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_mean_cast = reduce_sum(axes = var_771, keep_dims = var_565, x = var_770_cast);
            tensor<fp16, [1, 256, 1, 64]> x_zero_mean_cast = add(x = x_39_cast, y = x_mean_cast);
            tensor<fp16, []> var_774_to_fp16 = const()[name = tensor<string, []>("op_774_to_fp16"), val = tensor<fp16, []>(0.00390625)];
            tensor<fp16, [1, 256, 1, 64]> var_775_cast = mul(x = x_zero_mean_cast, y = var_774_to_fp16);
            tensor<fp16, [1, 256, 1, 64]> var_776_cast = mul(x = var_775_cast, y = x_zero_mean_cast);
            tensor<int32, [1]> var_777 = const()[name = tensor<string, []>("op_777"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 64]> x_var_cast = reduce_sum(axes = var_777, keep_dims = var_565, x = var_776_cast);
            tensor<fp16, []> var_779_to_fp16 = const()[name = tensor<string, []>("op_779_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 1, 1, 64]> var_780_cast = add(x = x_var_cast, y = var_779_to_fp16);
            tensor<fp16, []> var_781_epsilon_0_to_fp16 = const()[name = tensor<string, []>("op_781_epsilon_0_to_fp16"), val = tensor<fp16, []>(5.96046448e-08)];
            tensor<fp16, [1, 1, 1, 64]> var_781_cast = rsqrt(epsilon = var_781_epsilon_0_to_fp16, x = var_780_cast);
            tensor<fp16, [1, 256, 1, 64]> var_782_cast = mul(x = x_zero_mean_cast, y = var_781_cast);
            tensor<fp16, [256]> x_41_mean_0_to_fp16 = const()[name = tensor<string, []>("x_41_mean_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2900992)))];
            tensor<fp16, [256]> x_41_variance_0_to_fp16 = const()[name = tensor<string, []>("x_41_variance_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2901568)))];
            tensor<fp16, [256]> x_41_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_41_gamma_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2902144)))];
            tensor<fp16, [256]> x_41_beta_0_to_fp16 = const()[name = tensor<string, []>("x_41_beta_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2902720)))];
            tensor<fp16, []> x_41_epsilon_0_to_fp16 = const()[name = tensor<string, []>("x_41_epsilon_0_to_fp16"), val = tensor<fp16, []>(1.00135803e-05)];
            tensor<fp16, [1, 256, 1, 64]> x_41_cast = batch_norm(beta = x_41_beta_0_to_fp16, epsilon = x_41_epsilon_0_to_fp16, gamma = x_41_gamma_0_to_fp16, mean = x_41_mean_0_to_fp16, variance = x_41_variance_0_to_fp16, x = var_782_cast);
            tensor<int32, [2]> var_793 = const()[name = tensor<string, []>("op_793"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_795 = const()[name = tensor<string, []>("op_795"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_67_pad_type_0 = const()[name = tensor<string, []>("input_67_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_67_pad_0 = const()[name = tensor<string, []>("input_67_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 256, 1, 1]> op_792_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_792_to_fp16_affine_quantized"), quantized_data = tensor<int8, [512, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2903296))), scale = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3035008))), zero_point = tensor<int8, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3034432)))];
            tensor<fp16, [512]> encoders_2_feed_forward_w_1_bias_to_fp16 = const()[name = tensor<string, []>("encoders_2_feed_forward_w_1_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3036096)))];
            tensor<fp16, [1, 512, 1, 64]> input_67_cast = conv(bias = encoders_2_feed_forward_w_1_bias_to_fp16, dilations = var_795, groups = var_566, pad = input_67_pad_0, pad_type = input_67_pad_type_0, strides = var_793, weight = op_792_to_fp16_affine_quantized, x = x_41_cast);
            tensor<fp16, [1, 512, 1, 64]> input_cast = relu(x = input_67_cast);
            tensor<int32, [2]> var_804 = const()[name = tensor<string, []>("op_804"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_806 = const()[name = tensor<string, []>("op_806"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_808_pad_type_0 = const()[name = tensor<string, []>("op_808_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_808_pad_0 = const()[name = tensor<string, []>("op_808_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [256, 512, 1, 1]> op_803_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_803_to_fp16_affine_quantized"), quantized_data = tensor<int8, [256, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3037184))), scale = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3168640))), zero_point = tensor<int8, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3168320)))];
            tensor<fp16, [256]> encoders_2_feed_forward_w_2_bias_to_fp16 = const()[name = tensor<string, []>("encoders_2_feed_forward_w_2_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3169216)))];
            tensor<fp16, [1, 256, 1, 64]> var_808_cast = conv(bias = encoders_2_feed_forward_w_2_bias_to_fp16, dilations = var_806, groups = var_566, pad = var_808_pad_0, pad_type = var_808_pad_type_0, strides = var_804, weight = op_803_to_fp16_affine_quantized, x = input_cast);
            tensor<fp16, [1, 256, 1, 64]> x_cast = add(x = x_37_cast, y = var_808_cast);
            tensor<int32, [2]> var_826 = const()[name = tensor<string, []>("op_826"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_832 = const()[name = tensor<string, []>("op_832"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_837 = const()[name = tensor<string, []>("op_837"), val = tensor<int32, []>(1)];
            tensor<string, []> xs_3_pad_type_0 = const()[name = tensor<string, []>("xs_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> xs_3_pad_0 = const()[name = tensor<string, []>("xs_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [64, 256, 1, 1]> op_823_to_fp16_affine_quantized = constexpr_affine_dequantize()[axis = tensor<int32, []>(0), name = tensor<string, []>("op_823_to_fp16_affine_quantized"), quantized_data = tensor<int8, [64, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3169792))), scale = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3186368))), zero_point = tensor<int8, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3186240)))];
            tensor<fp16, [64]> output_projection_bias_to_fp16 = const()[name = tensor<string, []>("output_projection_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3186560)))];
            tensor<fp16, [1, 64, 1, 64]> xs_3_cast = conv(bias = output_projection_bias_to_fp16, dilations = var_832, groups = var_837, pad = xs_3_pad_0, pad_type = xs_3_pad_type_0, strides = var_826, weight = op_823_to_fp16_affine_quantized, x = x_cast);
            tensor<int32, [4]> xs_5_perm_0 = const()[name = tensor<string, []>("xs_5_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<fp16, [1, 64, 1, 64]> transpose_5 = transpose(perm = xs_5_perm_0, x = xs_3_cast);
            tensor<fp16, [1, 64, 1, 64]> xs_7_cast = mul(x = transpose_5, y = mask_cast);
            tensor<int32, [1]> var_848 = const()[name = tensor<string, []>("op_848"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> var_849 = const()[name = tensor<string, []>("op_849"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 1, 64]> xs_9_cast = reduce_sum(axes = var_848, keep_dims = var_849, x = xs_7_cast);
            tensor<int32, [1]> var_853 = const()[name = tensor<string, []>("op_853"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> var_854 = const()[name = tensor<string, []>("op_854"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 1, 1]> xs_len_cast = reduce_sum(axes = var_853, keep_dims = var_854, x = mask_cast);
            tensor<fp16, [1, 1, 1, 64]> xs_11_cast = real_div(x = xs_9_cast, y = xs_len_cast);
            tensor<int32, [1]> xs_axes_0 = const()[name = tensor<string, []>("xs_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 64]> xs_cast = squeeze(axes = xs_axes_0, x = xs_11_cast);
            tensor<int32, [1]> var_861_axes_0 = const()[name = tensor<string, []>("op_861_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 64]> var_861_cast = squeeze(axes = var_861_axes_0, x = xs_cast);
            tensor<string, []> var_861_cast_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_861_cast_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 64]> ctx_emb = cast(dtype = var_861_cast_to_fp32_dtype_0, x = var_861_cast);
        } -> (ctx_emb);
}
